package main

import (
	"fmt"
	"sort"
)

func main() {
	fmt.Println(minMalwareSpread([][]int{{1, 1, 0}, {1, 1, 1}, {0, 1, 1}}, []int{0, 1}))
}

//leetcode submit region begin(Prohibit modification and deletion)
func minMalwareSpread(h [][]int, init []int) int {
	sort.Ints(init)
	n := len(h)
	do := make([][]int, n)
	vis := make([]bool, n)

	var dfs func(o, i int)
	dfs = func(o, i int) {
		do[i] = append(do[i], o)
		vis[i] = true

		for j, x := range h[i] {
			if x == 1 && !vis[j] {
				dfs(o, j)
			}
		}
	}

	for _, v := range init {
		vis = make([]bool, n)
		dfs(v, v)
	}

	fmt.Println(do)

	del := make([]int, n)
	for _, ar := range do {
		if len(ar) == 1 {
			del[ar[0]]++
		}
	}

	ans := init[0]
	for i, v := range del {
		if v > del[ans] {
			ans = i
		}
	}

	return ans
}

//leetcode submit region end(Prohibit modification and deletion)
